44. Dockerのデータ管理の概要
  コンテナで扱う動的なデータは、起動中のコンテナの読み書き可能なレイヤーにおくことが
  できるが、いくつかのデメリットがある。コンテナが削除された時点で、コンテナ内に置いてあった
  データは消えてしまい、コンテナ間でデータを共有することができない
  
  書き込みのパフォーマンスも、ホスト上にデータを書き加えるのに比べて良くない

  コンテナの読み書き可能なレイヤーへの書き込みは、通常のファイルシステムとは異なる、
  ユニオンファイルシステムが利用されているため。

  Dockerにはホスト上のディレクトリやファイルをコンテナにマウントする仕組みがある


  volumeを使用したデータ管理
    Linuxの場合、/var/lib/docker/volumes配下に自動で作成され、コンテナに
    マウントされる。作成されたボリュームは名前をつけて管理することができ、
    複数のコンテナにマウントすることもできる。その場合は複数のコンテナで、
    共通のファイルを読み書きできる。
    ボリュームはコンテナが削除されても消えない。
    ホスト上では直接操作すべきではなく、あくまでコンテナ上でファイルを管理する
    ために用意されている機能

  bind mountを使用したデータ管理
    ボリュームとは異なり、ユーザーの管理しているファイルやディレクトリを
    コンテナ上にマウントする。こっちも同一のファイルやディレクトリを
    複数のコンテナにマウントできる。ユーザーが管理している領域なので、
    マウント元のファイルやディレクトリは事前に用意しておき、そのパスを指定して
    コンテナ上にマウントする。プロジェクトのソースコードや設定ファイルなどを
    ホストに置いておき、それをマウントすることで、ホスト側でファイルを編集
    しながら、動作を確認することもできる。

  tmpfsを使用したデータ管理
    ホストのメモリ領域をディレクトリとしてマウント。メモリ上にデータが置かれるため、
    Dockerホストがシャットダウンされたり、コンテナが停止した場合にはデータは
    消えてしまう。そのため用途としては、永続的なデータではなく一時的に保持しておく
    ようなデータの置き場所に使用し、最悪消えてしまっても問題ないデータをおく。
    例えばキャッシュ、の用途であったり、ストレージに保持しておきたくない、
    ワンタイムパスワードなどの保存場所に使う。オプションの設定で、マウントサイズを
    制限することもできる