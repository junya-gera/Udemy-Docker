・Dockerコンテナの実行

  $ docker run hello-world
    順にdockerコマンド、サブコマンド、イメージの指定
    runは次の3つを1度に実行
      docker pull   →イメージの取得
      docker create →コンテナの作成
      docker start  →コンテナの起動
    
    イメージ名の後に何も書かなければlatestのイメージがダウンロードされる
    明示的にタグを記述する場合はdocker run hello-world:latestのようにコロンの後に書く

  16.whalesayコンテナの実行とDockerイメージダウンロードの動作

    $ docker run docker/whalesay cowsay Hello!!
      イメージ名がdocker/whalesay
      cowsay Hello!!はdocker/whalesayのコンテナ内で呼び出すコマンド
      イメージ名の後にコマンドを続けることでコンテナが立ち上がった際に実行できる
      cowsayはクジラのAAに好きな言葉を喋らせるコマンド



  17.ローカル上のDockerイメージの管理
    $ docker images
      → ローカル上にダウンロード済みのイメージ一覧を表示するコマンド

      REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
      hello-world         latest              bf756fb1ae65        4 months ago        13.3kB
      docker/whalesay     latest              6b362a9f73eb        5 years ago         247MB
      
    $ docker tag docker/whalesay my_whalesay
      →tag タグ付けするサブコマンド。元のイメージ名、新しいイメージ名の順に書く
      → my_whalesayでdocker/whalesayと全く同じ意味になる

    $ docker tag docker/whalesay my_whalesay:ver1
      → 新しいイメージ名にver1というタグ名をつける

    $ docker inspect my_whalesay
      → inspect イメージの詳細情報を表示するサブコマンド
      → 後ろに対象のイメージ名かイメージIDをつける

    $ docker -f rmi docker/whalesay
      → rmi ローカル上のイメージを削除するサブコマンド
      → もしそのイメージを使用して作られたコンテナがある場合は、
        まずそのコンテナを先に削除するか、強制削除する-fを付ける

    $ docker pull docker/whalesay
      → イメージを取得するサブコマンド。削除してもこれで戻せる
      → ちなみにlatestタグのものが必ず最新とは限らないので、タグは明示的に
        つけたほうがいい



  18.Dockerfileを利用したイメージビルド方法の解説
    Dockerfileとは、コンテナの構成情報を定義したファイル。
    Dockerfileからイメージを構築することをイメージビルドという

    $ mkdir imagebuild
    $ cd imagebuild/
    $ vim dockerfile
    $ FROM docker/whalesay:latest
      → FROM イメージを作成する際に、元になるイメージを指定する命令
    
    $ RUN apt-get -y update && apt-get install -y fortunes
      → RUN イメージビルドの際に実行するコマンドを指定するための命令
      → apt-get パッケージを操作・管理するコマンド
      → install 指定したパッケージをインストール(今回はfortunes)

    $ CMD /usr/games/fortune | cowsay
      → CMD コンテナが作成された後に実行するコマンドを指定する命令

    $ docker build -t docker-whale .
      → build イメージをビルドするサブコマンド
      → -t docker-whale タグ名の指定(今回はdocker-whaleという名前を付ける)
      → . ビルドコンテキストの指定
      → ビルドコンテキスト イメージを作成する際にアクセスできるディレクトリやファイルの
        範囲を示すもの。今回はカレントディレクトリの.
        このファイルはまとめてDockerデーモンに送られる。ファイルサイズが大きい場合、
        転送に時間がかかるので、余計なファイルは消しておく
    
  19.Dockerfileを使用したイメージビルドの実行
    $ docker build --no-cache -t docker-whale .
      → --no-cache すでにビルドしていてdockerfileの中身が同じであれば
        Using cacheが残っているので更新されない。
        buildfileにapt-get updateがあるとき、このままだと更新されないので
        --no-cacheを付けることでキャッシュを無効化し全ての命令を実行する

  21.Docker Hubへのイメージのプッシュ方法
    → プッシュ リポジトリのイメージを追加すること

    $ docker login
      → Docker Hubへログインするコマンド
    
    Docker Hubにおけるタグ付けルール
      <Docker ID>/<イメージ名>:<タグ名>
        → タグ名は省略したらlatest

    $ docker tag docker-whale okogejunya/docker-whale:ver1
      → イメージをプッシュするためにタグ付けルールに乗っ取った名前に変更

    $ docker push <Docker ID>/<イメージ名>:<タグ名>
      → Docker HubにPushする際のコマンド

    $ docker pull <Docker ID>/<イメージ名>:<タグ名>
      → イメージへのアクセス権限があるDocker Hubのユーザーアカウントがあれば
        どこからでもイメージを取得できるようになった


  23.nginxコンテナの実行とデタッチドモードの解説

    nginxイメージのExposing extermal portに書いてあるコマンド⤵️
    $ docker run --name some-nginx -d -p 8080:80 some-content-nginx
    $ docker run --name <コンテナ名> -d -p <ホスト側のポート番号>:<コンテナ側のポート番号> <イメージ名>
      → --name <コンテナ名> 起動時のコンテナに名前をつけるオプション
      → -d デタッチドモード コンテナの実行をバックグラウンドで行うもの
        これがないとフォアグラウンドで実行され、ターミナルが止まり他の操作ができなくなる
      → -p <ホスト側のポート番号>:<コンテナ側のポート番号>
        コンテナのポートをコンテナ外に公開する設定
        ホストの8080に繋げばコンテナの80のnginxに繋がる

    $ docker stop test-nginx
    $ docker rm test-nginx



    24.バインドマウントの解説
      ホスト側のディレクトリをコンテナにマウントする

      Hosting some simple static contentに書いてあるコマンド
      $ docker run --name some-nginx -v /some/content:/usr/share/nginx/html:ro -d nginx
        -v <ホスト側のディレクトリ>:<コンテナ側のマウントポイント>:<オプション>  が追加
          → -v 静的なコンテンツをnginxで公開する 
          → :ro read only
          → 絶対パスで指定する

      $ mkdir docker-tutrial
      $ cd docker-tutrial
      $ mkdir html
      $ cd html

      $ vim index.html

      $ docker run --name first-nginx -v /Users/wadajunya/imagebuild/docker-tutrial/html:/usr/share/nginx/html:ro -d -p 8080:80 nginx
        これでホスト上のディレクトリをnginx上で公開できるようになった

    

    25.DockerfileのCOPY命令、ADD命令
      →ホストマシン上のファイルを、イメージ内にコピーする命令

      $ docker run --name tmp-nginx --rm -d nginx
        →コンテナは起動を止めた後も残り続ける。同名のコンテナが既にあると起動できない。
        今回はコンテナからnginxの設定ファイルを取り出すだけなので、--rmをつけることで
        起動を止めると同時に削除されるようにする

      ホストマシンのファイルをコンテナ内にコピーする場合
        $ docker cp <ホスト上のコピーしたいファイルのパス> \
          <コンテナ名 or ID> : <コピー先のパス>

      コンテナ内のファイルをホストマシンにコピーする場合
        $ docker cp <コンテナ名 or ID> : <コンテナ上のコピーしたいファイルのパス> \
          <コピー先のパス>

      今回はtmp-nginxというコンテナからnginxの設定ファイルをホストにコピーする
        $ docker cp tmp-nginx:/etc/nginx/conf.d/default.conf ./
        lsをすればコピーできたか確かめられる

      $ vim default.conf
        →ポート番号を8080に変更してみる

      $ vim Dockerfile
        FROM nginx:latest
        COPY default.conf /etc/nginx/conf.d/default.conf
          →nginxのlatestタグのイメージを元にして、ビルドコンテキストに存在する
          default.confのファイルを、nginxの設定ファイルのパスにコピーする

      ビルドしてみる
        $ docker build -t nginx:ver1 .

      コンテナを起動
        $ docker run --name web -p 8080:8080 --rm nginx:ver1

      ADD命令はCOPY命令に加えていくつか機能があるが、COPYがベストプラクティス


  26.コンテナのライフサイクル
    コンテナが起動している間は、コンテナはホストマシンの1プロセスとして動作する
    コンテナが作成されて削除されるまで、たくさんのステータスがある

    ①Created → コンテナが作成されて実行される前の状態
      $ docker create --name status-test -it alpine /bin/sh
      → -i 標準入力を開き続け、手元の環境でdocker内入力ができるようになる
        -t tty（擬似端末）を割り当てる

      $ docker ps
        → 現在実行中のコンテナの一覧を確認できる

      $ docker ps -a
        → 実行していないコンテナも含めて表示する

    ②Running → コンテナがstartされ実行中の状態
      $ docker start status-test
        → Up 7 secondsなど、起動してからの時間が記載されている

    ③Paused → pauseコマンドで一時停止している状態
      $ docker pause status-test
      この状態では応答できない。unpauseコマンドで解除できる

    ④Restart → 再起動中

    ⑤Exited → 実行は終了したが残っている状態
      $ docker stop status-test

    ⑥Removing → 削除中

    ⑦Dead → 正常に終了できずに残ってしまった状態。削除するしかない



  27.コンテナのシェルに接続するコマンド
    起動中のコンテナに接続する方法
      $ docker attach <コンテナ名 or コンテナID>
        → シェルに接続できるのは、コンテナでシェルを実行している場合のみ
          exitで抜けた場合、プロセスも切れるのでコンテナが停止してしまう
      
      $ docker exec -it <コンテナ名 or コンテナID> /bin/bash
        → exec自体は、起動したコンテナ内で任意のコマンドを実行するためのコマンド
        → execはすでに起動しているコンテナ上で特定のコマンドを実行する。
        → exitで抜けてもコンテナは停止しない。こちらがベストプラクティス 

    ubuntuのコンテナを起動して、bashを立ち上げた状態にする
    $ docker run --name connect-test -it -d ubuntu /bin/bash

    $ docker exec -it connect-test /bin/bash

  
  28.Dockerコミットの解説
    $ docker commit <コンテナ名 or コンテナID> <イメージ名>:<タグ名>
      → コンテナの状態をイメージとして保存することができる。
      ただしこの時、コンテナ内で行った作業はどこにも明確な記録として残らない。
      dockerfileをビルドしてイメージを作った時、何のコマンドを使用したかが
      レイヤーとして記録されている。これをdocker historyコマンドで確認できる。
      コンテナ内部で実行したコマンドはこれには出てこない。
      なので基本的にはdockerfileを使う方がいい。

  29.コンテナのリンク機能
    2つのコンテナをlinkで設定する
    $ docker run --link <コンテナ名 or コンテナID> : <リンク先コンテナの別名>
      → 別名は任意
      コンテナ名、または別名（エイリアス）でリンク先に通信できるようになる。
      リンク先の環境変数や、リンク先コンテナのネットワークに関する環境変数が
      起動したコンテナに追加される。